#!/bin/sh
####################################################
# Main csrgrinder script.
# This file is part of certgrinder.
# The latest version can be found on Github at
# https://github.com/tykling/certgrinder
####################################################
VERSION="v0.10.2"

CSR_MAX_LENGTH=$(10*1024*1024) # 10 MiB

# get CSR from stdin and write to a temp file
CSRFILE=$(mktemp)
head -c "$CSR_MAX_LENGTH" > "$CSRFILE"
if [ "$(head -c 1 | wc -c)" -gt 0 ]; then
    logger "Received a CSR longer than ${CSR_MAX_LENGTH} bytes. Aborting..."
    rm -f -- "$CSRFILE"
    exit 1
fi


# are we in testmode? get args from $SSH_ORIGINAL_COMMAND
set -- $SSH_ORIGINAL_COMMAND
if [ "$#" -eq "2" -a "$2" = "test" ]; then
    TEST="--staging"
    MODE="test"
else
    TEST=
    MODE="production"
fi

logger "csrgrinder ${VERSION} Wrote $(stat -f%z $CSRFILE) bytes CSR from client $SSH_CLIENT to temp file $CSRFILE (running in $MODE mode)"

# get the directory we are running from
BASEPATH=$(dirname "$(realpath "$0")")

# define some defaults
: ${AUTHHOOK:="${BASEPATH}/manual-auth-hook"}
: ${CLEANUPHOOK:="${BASEPATH}/manual-cleanup-hook"}
: ${WEBROOT:="/usr/local/www/letsencrypt-auto"}

# load config file (optional, but DNS-01 will be skipped if $ACMEZONE is not configured
if [ -f "${BASEPATH}/csrgrinder.conf" ]; then
    . "${BASEPATH}/csrgrinder.conf"
fi

# get a temp filename for the certificate files
FULLCHAINFILE=$(mktemp)
CHAINFILE=$(mktemp)
CERTFILE=$(mktemp)
rm -f $CHAINFILE $FULLCHAINFILE $CERTFILE

# get a temp filename to save any error output from certbot
ERRORFILE=$(mktemp)

# loop over the supported challenge types
for CHALLENGE in dns http; do
    if [ "$CHALLENGE" = "dns" -a -z $ACMEZONE ]; then
        logger "Not attempting DNS-01 because ACMEZONE is unset."
        continue
    fi

    logger "Attempting challenge type ${CHALLENGE}..."

    # issue new certificate
    COMMAND="/usr/local/bin/sudo ACMEZONE=${ACMEZONE} WEBROOT=${WEBROOT} /usr/local/bin/certbot certonly --non-interactive --quiet --rsa-key-size 4096 --authenticator manual --preferred-challenges ${CHALLENGE} --manual-auth-hook ${AUTHHOOK} --manual-cleanup-hook ${CLEANUPHOOK} --manual-public-ip-logging-ok --csr ${CSRFILE} --fullchain-path ${FULLCHAINFILE} --cert-path ${CERTFILE} --chain-path ${CHAINFILE} ${TEST}"
    logger "Running certbot command: $COMMAND"
    $COMMAND 2> $ERRORFILE
    EXITCODE=$?

    # check certbot exit code
    if [ $EXITCODE -eq 0 ]; then
        logger "Success. Certbot wrote $(stat -f%z $CERTFILE) bytes certificate chain to $CERTFILE - sending to stdout and cleaning up temp files"
        # output full certificate chain to stdout
        cat $FULLCHAINFILE
        break
    else
        logger -s "Failed to get certificate using challenge type $CHALLENGE. Certbot exit code was $?. Certbot output was:"
        cat $ERRORFILE | logger -s
    fi
done

# clean up temp files (some of these may not exist if certbot failed for some reason)
rm -f $CSRFILE $CERTFILE $CHAINFILE $FULLCHAINFILE $ERRORFILE

# mirror certbots exitcode
logger "Exiting csrgrinder with exit code $EXITCODE"
exit $EXITCODE

